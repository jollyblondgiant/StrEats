1685322826800:(js/alert "foo")
1685909123909:(import '[openlayers Map])
1685909134503:(import '[ol Map])
1685909163722:(import '[ol/Map])
1685909166231:Map
1685909172494:ol/Map
1685909177190:(Map)
1685909212954:(import '[ol Map])
1685909218680:(type ol/Map)
1685909252638:(js/ol.Map.)
1685909260264:(js/openlayers.Map.)
1685909276677:(js/OpenLayers.Map.)
1685909308400:(js/Map)
1685909312619:(js/Map.)
1685909320941:(type (js/Map.))
1685909552950:(js/OpenLayers.Map.)
1685909570615:(js/Layer. )
1685909591924:(import '[ol Map Layer])
1685909632864:(import [OpenLayers])
1685909646860:(import '[OpenLayers])
1685909657374:js/OpenLayers
1685909661532:js/OpenLayers.Map
1685909672170:(js/OpenLayers.Map.)
1685909829683:(require 'cljsjs.openlayers)
1685909860279:js/openlayers.Map.
1685909889694:(require '[cljsjs.openlayers])
1685909912597:(js/openlayers.Map.)
1685909922930:(require '[cljsjs.ol])
1685909928991:(js/ol.Map.)
1685910039993:(js/ol.Layer.OSM. "foo)\n\n")
1685910094623:(js/OpenLayers.Map.)
1685910102317:(js/openlayers.Map.)
1685910110134:(js/ol.Map.)
1685932871085:(false? :a)
1685932874658:(false? true)
1685932878205:(false? nil)
1685933749226:(for [k v] (fn [e] e) {:foo :bar :spam :eggs})
1685933817390:(for [[k v] {:foo :bar :spam :eggs] (fn [e] e))
1685933821147:(for [[k v] {:foo :bar :spam :eggs] (fn [e] e)
1685934067199:(for [[x y] {:foo :bar :spam :eggs}]\n    (prn x))
1685934427402:(for [[x y] {:foo :bar :spam :eggs}\n      :when (contains? [:spam] x)]\n    (prn x))
1685934441290:(contains? [:spam] :spam)
1685934534329:(for [[x y] {:foo :bar :spam :eggs}\n      :when (some #{:spam} x)]\n    (prn x))
1685934574051:(for [[x y] {:foo :bar :spam :eggs}\n      :when (some x #{:spam})]\n    (prn x))
1685934622508:(some #{:spam} #{:spam})
1685934632795:(some #{:foo} #{:spam })
1685934637262:(some #{:foo} #{:spam :foo})
1685934655398:(some #{:foo :bar} #{:spam :foo})
1685934664767:(some #{:foo :bar} #{:spam :foo :eggs})
1685934677248:(some #{:foo :bar :eggs} #{:spam :foo :eggs})
1685976805211:[:<>]
1686021009164:(if {:foo :bar} :a :b)
1686106440842:(require 'goog.string.includes)
1686106446337:subs
1686106455646:contains?
1686106471042:(contains? "Markup" "Mark")
1686106479427:(contains? "Markup" #"Mark")
1686106485340:(contains? "Markup" #"Mark*")
1686106488524:(contains? "Markup" #"Mark.*")
1686106500918:(.contains "Markup" "rku")
1686106523060:re-find
1686106532794:(re-find "Markup" #"rku")
1686106548445:(re-find #"rku" "Markup")
1686106564666:(some? (re-find #"rku" "Markup"))
1686106569826:(some? (re-find #"rkz" "Markup"))
1686106792754:(let [this (partial (fn [a b] b) :foo)] (this :bar))
1686111455286:(assoc [:foo :bar :spam :eggs] 2 :baz)
1686246300845:(nil? {})
1686250181579:(some? nil)
1686250185468:(some? {})
1686282284725:(require '[aero.core :refer [read-config])
1686282289600:(require '[aero.core :refer [read-config]]\n         )
1686282368900:(require '[cljs-http.client :as http]\n         )
1686282385930:(http/get "127.0.0.1:3000/map")
1686282395599:(go (http/get "127.0.0.1:3000/map"))
1686282410201:(require '[cljs.core.async.macros :refer [go]])
1686282458301:(require-macros '[cljs.core.async.macros :refer [go]])
1686282460444:(go (http/get "127.0.0.1:3000/map"))
1686282592276:(go (let [response (<! (http/get "https://api.github.com/users"\n                                                                  {:with-credentials? false\n                                                                                                     :query-params {"since" 135}}))]\n            (prn (:status response))\n            (prn (map :login (:body response)))))
1686282624824:(go (let [response (<! (http/get "127.0.0.1:3000/map"\n                                                                  {:with-credentials? false\n                                                                                                     :query-params {"since" 135}}))]\n            (prn (:status response))\n            (prn (map :login (:body response)))))
1686283031562:(require '[streats.db])
1686283038680:(ns streats.db)
1686283041329:map-string
1686283046044:(map-string)
1686283136666:process.env.GMAPS_API_KEY
1686283181202:(go (let [response (<! (http/get "127.0.0.1:3000/map"\n                                                                  {:with-credentials? false\n                                                                                                     :query-params {"since" 135}}))]\n            (prn (:status response))\n            (prn (map :login (:body response)))))
1686283263115:(require '[dotenv.config])
1686283384418:(import '[dotenv/config])
1686283399658:process.env
1686283404419:(process.env)
1686283420959:process.env.SERVER_PORT
1686283433007:js->cljs
1686283434333:js->clj
1686283440847:(js->clj process.env)
1686283453348:process.env.NODE_ENV
1686283558466:(import '[dotenv config])
1686283565394:(import '[dotenv/config])
1686283581159:(js->clj process.env)
1686284580265:(require '[re-frame.core :refer [dispatch]])
1686284602437:(require '[cljs.core.async :as async])
1686284635602:(require '[re-frame.core :refer [reg-event-db]]\n         )
1686284680032:(reg-event-db :map-handler (fn [db [_ response]] (prn response) (merge db response)))
1686284704237:(defn get-data []\n    (async/go\n          (let [response (async/<! (http/get "localhost:3000/map"))]\n                  (dispatch [:map-response response]))))
1686284719058:(require '[cljs-http :as http])
1686284745076:(require '[cljs-http.client :as http])
1686284747942:(defn get-data []\n    (async/go\n          (let [response (async/<! (http/get "localhost:3000/map"))]\n                  (dispatch [:map-response response]))))
1686284751265:(get-data)
1686284766412:(require '[re-frame.core :refer [subscribe]])
1686284776232:(require '[re-frame.core :refer [reg-sub]])
1686284803879:(reg-sub :map-response (fn [db _] db))
1686284822149:@(subscribe [:map-response])
1686284925705:(defn get-data []\n    (async/go\n          (let [response (async/<! (http/get "localhost:3000/map"))]\n                  (dispatch [:map-handler response]))))
1686284928545:(get-data)
1686284932693:@(subscribe [:map-response])
1686284991312:(reg-event-db :map-handler (fn [db [_ {:keys [body status]}]] (prn response) (merge db body)))
1686285000533:(reg-event-db :map-handler (fn [db [_ {:keys [body status]}]]\n                             (merge db body)))
1686285006281:(defn get-data []\n    (async/go\n          (let [response (async/<! (http/get "localhost:3000/map"))]\n                  (dispatch [:map-handler response]))))
1686285010515:(get-data)
1686285014409:@(subscribe [:map-response])
1686285398001:(js/fetch "127.0.0.1:3000/map")
1686285430844:(-> * (.then #(.json %)) (.then prn))
1686285453697:(-> (js/fetch "127.0.0.1:3000/map") (.then #(.json %)) (.then prn))
1686285532079:(in-ns 'streats.core)
1686285534559:-main
1686285688589:get-mapstring
1686285693628:(get-mapstring)
1686287004540:(-> (js/fetch "127.0.0.1:3000/map") (.then #(.json %)) (.then prn))
1686287184154:(-> (js/fetch "http://localhost:3000/map") (.then #(.json %)) (.then prn))
